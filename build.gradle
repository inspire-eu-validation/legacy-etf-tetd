///////////////////////////////////////////////////////////////////////////////////////
//
// ETF-TETD
//
///////////////////////////////////////////////////////////////////////////////////////

buildscript {
	repositories {
		maven {
			url "https://services.interactive-instruments.de/etfdev-af/plugins-releases-local"
			credentials {
				// Our repository requires authenticating
				username 'ii-bda'
				password 'AP7mb4WA6F1ckdZkaE8Qx8GSowt'
			}}
	}
	dependencies {
		classpath group: 'de.interactive_instruments.bda', name: 'etf-bda', version: '[1.0.29,1.0.99]'
	}
	dependencies {
		ant.unjar src: configurations.classpath.files.find {it.path.contains('etf')}, dest: 'build/gradle'
	}
}
apply from: 'build/gradle/ii-bda.gradle'

///////////////////////////////////////////////////////////////////////////////////////

group = 'de.interactive_instruments.etf.testdriver'
description = "ETF Team Engine test driver TEAM Engine test driver"

ext.testDeploymentDir = project.file('./build/tmp/td')

ext.deploymentDir = project.hasProperty('etf.td.deployment.dir') ?
		project.getProperty('etf.td.deployment.dir') :
		testDeploymentDir

ext.testDataStorageDir = project.hasProperty('etf.ds.dir') ?
		project.getProperty('etf.ds.dir') :
		project.file('./build/tmp/etf-ds').absolutePath


repositories {
	mavenLocal()
}

configurations {
	api
	integrationTest
}

dependencies {
	compileOnly group: 'de.interactive_instruments', name: 'ii-commons-util', version:'3.0.0'+project.snapshotSuffix
	compileOnly group: 'de.interactive_instruments.etf', name: 'etf-core', version:'1.1.0'+project.snapshotSuffix
	compileOnly group: 'de.interactive_instruments.etf', name: 'etf-spi', version:'1.0.1'+project.snapshotSuffix
	api group: 'org.slf4j', name: 'slf4j-api', version: etf_slf4jApiVersion

	// https://mvnrepository.com/artifact/org.jsoup/jsoup
	compile group: 'org.jsoup', name: 'jsoup', version: '1.10.2'
	
	integrationTest group: 'ch.qos.logback', name: 'logback-classic', version: etf_logbackVersion
	integrationTest group: 'junit', name: 'junit', version: etf_junitTestVersion
	integrationTest group: 'de.interactive_instruments.etf', name: 'etf-spi', version:'1.0.1'+project.snapshotSuffix
	integrationTest group: 'de.interactive_instruments.etf', name: 'etf-stdtot', version: '1.0.1' + project.snapshotSuffix
	integrationTest group: 'de.interactive_instruments.etf.test', name: 'etf-unittest', version: '1.1.1' + project.snapshotSuffix
}

configurations {
	compile.extendsFrom api
	testCompile.extendsFrom integrationTest
}

def allLibs = configurations.runtime + configurations.compile -
		configurations.compile.filter { it.name.startsWith('etf-core') } -
		configurations.compile.filter { it.name.startsWith('etf-spi') } -
		configurations.compile.filter { it.name.startsWith('ii-commons-util') } -
		configurations.compile.filter { it.name.startsWith('slf4j-api') } -
		configurations.compile.filter { it.name.startsWith('log4j') && !it.name.startsWith('log4j-over-slf4j') } -
		configurations.compile.filter { it.name.startsWith('jetty') } -
		configurations.compile.filter { it.name.startsWith('xml-apis') } -
		configurations.compile.filter { it.name.startsWith('commons-lang3') } -
		configurations.compile.filter { it.name.startsWith('xercesImpl') }

jar.doFirst {
	manifest {
		attributes(
				'Test-Engine-Title': 'TEAM Engine',
				'Implementation-Vendor-Id': 'org.opengis.cite',
				'Test-Engine-Vendor': 'Open Geospatial Consortium',
				'Test-Engine-Version': '5.0'
		)
	}
}

jar {
	into('lib') {
		from allLibs
	}
}

task deployTestDriver(dependsOn: jar) {
	doLast {
		copy {
			from jar
			into "$deploymentDir"
		}
		println "Copied test driver to $deploymentDir"
	}
}

install {
	dependsOn = ["deployTestDriver"]
}

// INTEGRATION TESTING
///////////////////////////////////////////////////////////////////////////////////////


task deployTestDriverForIntegrationTesting(dependsOn: jar) {
	group 'verification'
	doLast {
		copy {
			from jar
			into "$testDeploymentDir"
		}
		println "Copied test driver to $testDeploymentDir"
	}
}

// Drop classloader for integration tests
sourceSets {
	test {
		java {
			compileClasspath += main.output
			runtimeClasspath = configurations.api + test.output + configurations.integrationTest
		}
	}
}

test {
	dependsOn = ["testClasses", "compileTestJava", "deployTestDriverForIntegrationTesting"]
}

///////////////////////////////////////////////////////////////////////////////////////
